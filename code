Algorithm:

	•	Contiguous Allocation
	•	Get number of files from the user.
	•	Gather the memory requirement for the file.
	•	Get the starting block from the user
	•	Allocate the memory in a sequential order.
	•	Check if the location is free or not
	•	If the location is allocation, set the flag = 1.
	•	Print the file length and sequential blocks allocated.

	•	Linked Allocation
	•	Get the file size from the user.
	•	Create Linked list in the memory location.
	•	Get the starting block from the user.
	•	Store file data in data pointer part and the next file address in the address pointer
	•	Print the file number and linked list of memory.

	•	Indexed Allocation
	•	Get the file size from the user
	•	Create an array for storing memory location.
	•	Store the index block from the user
	•	Get the location where the file has to store.
	•	Check if the memory place is free or not.
	•	If free set the flag = 1 & add the memory block in the index array.
	•	Print the file number and array of index of memory.

Program:
Filename – ex12_fileallocation.c #include<stdio.h> #include<stdlib.h>

void seq(int files[])
{
int len=0, count = 0, startblk, i, j;
printf("\n---Sequential File Allocation---\n"); printf("Enter the file size: ");
scanf("%d", &len);
printf("Enter the starting block: "); scanf("%d", &startblk); for(i=startblk; i<(startblk+len); i++)
{
if(files[i]==0)
{
count++;
}
}
if(count == len)
{
for(j=startblk; j<(startblk+len); j++)
{
files[j]=1;
printf("%d\t%d\n", j, files[j]);
}
if(j != (startblk+len-1))
{
printf("The file is allocated in the block\n\n");

}
}
else
{
printf("The file is not allocated in the block\n\n");
}
}

void linked(int files[])
{
int count=0, next[50], startblk, len, i, j, k; printf("\n---Linked File Allocation---\n"); printf("Enter the file size: ");
scanf("%d", &len);
x:printf("Enter the starting block: "); scanf("%d", &startblk); if(files[startblk]!=1)
{
y:count=0; next[0] = startblk;
printf("Enter the next block to connect:\n"); for(i=1; i<len; i++)
{
scanf("%d", &next[i]);
}
for(j=0;j<len;j++)
{
if(files[next[j]]!=1)
{
count++;
}
else
{
printf("Block is already allocated\n");
printf("Enter another set of block after starting block\n"); goto y;
}
}
printf("File Allocated in Given blocks\n");
}
else
{
printf("Block is already allocated\n"); printf("Enter another block\n");
goto x;
}

for(j=0;j<len;j++)
{
files[next[j]]=1;
}
if(count==len)
{
printf("Starting Block is: %d\n", startblk); printf("Data\tLink");
for(k=0;  k<len; k++)
{
printf("\n  %d	>%d", files[next[k]], next[k]);
}
printf("	>end\n", files[next[k]]);
}
}

void indexed(int files[])
{
int ind, count, index[50], len; int i, j, k;
printf("\n---Indexed File Allocation	\n");
x:printf("Enter the index block: "); scanf("%d", &ind); if(files[ind]!=1)
{
printf("Enter the file size: "); scanf("%d", &len);
}
else
{
printf("%d index is already allocated\n", ind); goto x;
}
y:count=0;
printf("Enter no of files for index %d on the disk:\n", len); for(i=0; i<len; i++)
{
scanf("%d", &index[i]); if(files[index[i]]==0)
{
count++;
}
}
if(count==len)
{
for(j=0; j<len; j++)

{
files[index[j]] = 1;
}
printf("File is Allocated in the given index\n"); printf("File\tIndex\n");
for(k=0; k<len; k++)
{
printf("  %d	>%d:%d\n", ind, index[k], files[index[k]]);
}
}
else
{
printf("Block in the index is already allocated\n"); printf("Enter Another block  index for file\n"); goto y;
}
printf("\n");
}

int main()
{
int files[50], i; for(i=0;i<50;i++)
{
files[i]=0;
}
seq(files); linked(files); indexed(files); return 0;
}
